#!/bin/bash

script_name=$(basename "$0")
source base
source_env "$script_name"
base_image=""
runner_name=""
runner_label=""

# ##################################################
# Print usage and manage opts
# ##################################################

function show_usage {
  echo "Usage: $0 <flags>"
  echo "  -i: Specify base image name"
  echo "  -n: Specify runner name"
  echo "  -l: Specify GitHub runner label"
  echo "  -h: Show this help message"
}

while getopts "i:n:l::h" opt; do
  case $opt in
    i  ) base_image="$OPTARG";;
    n  ) runner_name="$OPTARG";;
    l  ) runner_label="$OPTARG";;
    h  ) show_usage; exit 0;;
    \? ) log_debug "Invalid option: -$OPTARG"; show_usage; exit 1;;
    :  ) log_debug "Option -$OPTARG requires an argument."; show_usage; exit 1;;
    *  ) log_debug "Unimplemented option: -$opt" >&2; exit 1;;
  esac
done

source base.opts

if [ -z "$runner_name" ] || [ -z "$runner_label" ]; then
        log_debug 'Missing -n or -l' >&2
        exit 1
fi

# ##################################################
# Clone tart VM if necessary
# ##################################################

log_output "[HOST] ðŸ’» Cloning base macOS VM"
tart clone "$base_image" "$runner_name"

# ##################################################
# Boot up tart VM
# ##################################################

log_output "[HOST] ðŸ’» Launching base VM"
trap 'log_output "[HOST] ðŸª“ Killing the VM"; tart delete $runner_name; log_output "[HOST] ðŸš¦ Stopping script"; exit 1' SIGINT
tart run --no-graphics "$runner_name" >/dev/null 2>&1 &

log_output "[HOST] ðŸ’¤ Waiting for base VM to boot"
vm_ip_address=$(tart ip "$runner_name")
until [[ "$vm_ip_address" =~ ^([0-9]+\.){3}[0-9]+$ ]]; do
	vm_ip_address=$(tart ip "$runner_name")
	sleep 1
done

log_output "[HOST] ðŸ’» Copying over our host SSH public key; this requires a password..."
ssh-copy-id -i "$VM_SSH_KEY_PATH" "$VM_USERNAME@$vm_ip_address"
log_output "[HOST] ðŸ’¤ Waiting for SSH to be available on the VM"
until [ "$(ssh -q  -i "$VM_SSH_KEY_PATH" -o ConnectTimeout=1 -o StrictHostKeyChecking=no -oBatchMode=yes "$VM_USERNAME@$vm_ip_address" pwd)" ]; do
  sleep 1
done

log_output "[HOST] ðŸ’» Stopping the base VM"
tart stop "$runner_name"

# ##################################################
# Send updates to Buildkansen
# ##################################################

log_output "[HOST] ðŸ™Š Telling buildkansen to park a slot for the new VM"
data='{
  "github_runner_label": "'"$runner_label"'",
  "base_vm_name": "'"$runner_name"'"
}'
response=$(curl -s -w "%{http_code}" --output /dev/null \
                      -XPUT \
                      -H "Authorization: Bearer $INTERNAL_API_TOKEN" \
                      -H "Accept: application/json" \
                      -H "Content-Type: application/json" \
                      -d "$data" \
                      "$INTERNAL_BIND_API_URL")
if [[ "$response" -ge 200 && "$response" -lt 300 ]]; then
  log_output "[HOST] ðŸš€ Guest vm is registered!"
  exit 0
else
  log_debug "Error: Request failed with HTTP Status Code: $response"
  log_output "[HOST] ðŸ’£ Failed to register guest vm!"
  tart delete "$runner_name"
  exit 1
fi
